<?php

/**
 * @file
 * This is the module for USL2.
 */

require_once(drupal_get_path('module', 'atl') . '/inc/common/menu.inc');
require_once(drupal_get_path('module', 'atl') . '/inc/common/functions.inc');

/**
 * Implementation of hook_permission().
 */
function atl_permission() {
  return array(
    'game access' => array(
      'title' => t('Game Access'),
      'description' => t('Access the game.'),
    ),
    'game web access' => array(
      'title' => t('Game Web Access'),
      'description' => t('Access the game via a web browser.'),
    ),
  );
}

/*
function atl_cron() {

  db_set_active('game');

// save old approval ratings

  $sql = 'update elected_officials set approval_45 = approval_30,
    approval_30 = approval_15, approval_15 = approval_rating;';
  $result = db_query($sql);

// move all elected officials toward a 60% approval rating

  $sql = 'update elected_officials set approval_rating = 60
    where (approval_rating >= 59.75 AND approval_rating <= 60.25);';
  $result = db_query($sql);

  $sql = 'update elected_officials
    set approval_rating = approval_rating + 0.25
    where approval_rating <= 59.75;';
  $result = db_query($sql);

  $sql = 'update elected_officials
    set approval_rating = approval_rating - 0.25
    where approval_rating >= 60.25;';
  $result = db_query($sql);

  $sql = 'update elected_officials
    set approval_rating = 0 where approval_rating < 0;';
  $result = db_query($sql);

  $sql = 'update elected_officials
    set approval_rating = 100 where approval_rating > 100;';
  $result = db_query($sql);


//   if (date('H') < 9) { // < 9AM -- 10 carolers every 15 mins
//     $carolers_wanted = 20;
//   } elseif (date('H') < 17) { // < 5PM -- 25 carolers
//     $carolers_wanted = 35;
//   } else { // >= 5PM -- 50 carolers
//     $carolers_wanted = 55;
//   }

// enjoy caroling?
//   $sql = 'update neighborhoods
//     set special_int = %d where special_int >= 0;';
//   $result = db_query($sql, $carolers_wanted);

// the grinch!
//   $sql = 'update neighborhoods
//     set special_int = -50
//     where special_int > 0 and xcoor > 0
//     order by rand()
//     limit 20;';
//   $result = db_query($sql);


// zombies!
  $sql = 'select count(id) as count from users
    where meta = "zombie";';
  $result = db_query($sql);
  $item = db_fetch_object($result);
  $zombie_count = $item->count;

  if ($zombie_count > 0) {

//     mail('joseph@cheek.com', "$zombie_count zombies", 'fyi');

// move them, enhance experience
    $sql = 'update users set experience = floor(rand() * 1500000) + 1
      where meta = "zombie" order by rand() limit %d;';
    $result = db_query($sql, ceil($zombie_count / 10));

    $sql = 'update users set experience = floor(rand() * 250000) + 1
      where meta = "zombie" order by rand() limit %d;';
    $result = db_query($sql, ceil($zombie_count / 10));

    $sql = 'update users set fkey_neighborhoods_id = floor(rand() * 85) + 1,
      experience = experience + 10000
      where meta = "zombie" and fkey_neighborhoods_id = 81;';
    $result = db_query($sql);

    $sql = 'update users set fkey_neighborhoods_id = floor(rand() * 85) + 1,
      experience = experience + 1000
      where meta = "zombie" order by rand() limit %d;';
    $result = db_query($sql, ceil($zombie_count / 10));

    $sql = 'select * from levels;';
    $result = db_query($sql);
    $levels = array();
    while ($level = db_fetch_object($result)) $levels[] = $level;

    for ($a = 0; $a < count($levels) - 1 ; $a++) {

      $sql = 'update users set level = %d, elocution = %d
        where experience >= %d and experience < %d
        and meta = "zombie";';
      $result = db_query($sql, $a + 1, $a * 2 + 2, $levels[$a]->experience,
        $levels[$a + 1]->experience - 1);
    }

  } // any zombies?


// unfreeze players

    $sql = 'update users set meta = "" where meta = "frozen";';
    $result = db_query($sql);

// move all hoods toward a 50 beauty rating

// winter
//   $sql = 'update neighborhoods set rating = 50
//     where (rating >= 49.9 AND rating <= 50.1);';
//   $result = db_query($sql);

//   $sql = 'update neighborhoods
//     set rating = rating + 0.1
//     where rating < 49.9;';
//   $result = db_query($sql);

//   $sql = 'update neighborhoods
//     set rating = rating - 0.1
//     where rating > 50.1;';
//   $result = db_query($sql);

// spring/fall
  $sql = 'update neighborhoods set rating = 100
    where (rating >= 99.75 AND rating <= 100.25);';
  $result = db_query($sql);

  $sql = 'update neighborhoods
    set rating = rating + 0.25
    where rating < 99.75;';
  $result = db_query($sql);

  $sql = 'update neighborhoods
    set rating = rating - 0.25
    where rating > 100.25;';
  $result = db_query($sql);


// no alder?  reset one hood to base
//   $sql = 'SELECT id
//     FROM neighborhoods
//     WHERE id NOT IN (
//
//       SELECT neighborhoods.id
//       FROM neighborhoods
//       RIGHT JOIN users ON users.fkey_neighborhoods_id = neighborhoods.id
//       JOIN elected_officials ON elected_officials.fkey_users_id = users.id
//       AND elected_officials.fkey_elected_positions_id = 1
//     )
//
//     ORDER BY RAND()
//     LIMIT 1;';
//   $result = db_query($sql);
//   $item = db_fetch_object($result);
//
//   $sql = 'update neighborhoods set rating = 50, residents = 10,
//     welcome_msg = "Unmaintained and unloved, this neighborhood has atrophied."
//     where id = %d;';
//   $result = db_query($sql, $item->id);


  $addition = 0; // winter
  $addition = 10; // spring / fall

// give hoods residents to match - each rating / 5 plus $addition
  $sql = 'UPDATE `neighborhoods` SET residents = residents + 1
    WHERE floor(rating / 5) > (residents - %d) AND rand() > 0.9';
  $result = db_query($sql, $addition);

  $sql = 'UPDATE `neighborhoods` SET residents = residents - 1
    WHERE floor(rating / 5) < (residents - %d) AND rand() > 0.9';
  $result = db_query($sql, $addition);

// april fools -- move 100 people at random
//   $sql = 'select users.id from users
//     left join elected_officials on users.id = elected_officials.fkey_users_id
//     where elected_officials.id IS NULL
//     and users.level >= 25
//     order by rand()
//     limit 100;';
//   $result = db_query($sql);
//   $data = array();
//   while ($item = db_fetch_object($result)) $data[] = $item;
//
//   foreach ($data as $item) {
//
//     $sql = 'select id from neighborhoods where xcoor > 0 and ycoor > 0
//       order by rand() limit 1;';
//     $result = db_query($sql);
//     $hood = db_fetch_object($result);
//
//     $sql = 'update users set fkey_neighborhoods_id = %d
//       where id = %d;';
//     $result = db_query($sql, $hood->id, $item->id);
//
//   }


// unfinished favors
  $sql = 'select favor_requests.*, favors.values_cost from favor_requests
    left join favors on favor_requests.fkey_favors_id = favors.id
    where time_due < CURRENT_TIMESTAMP
    and time_completed = 0
    ;';
  $result = db_query($sql);
  $data = array();
  while ($item = db_fetch_object($result)) $data[] = $item;

  foreach ($data as $item) {

// notify initiator
    $cost = (int) $item->values_cost;
    $bounty = mt_rand($cost / 2, $cost * 5);
    $message = ($item->success_expected == 'y') ?
      "I was unable to complete your favor on time.&nbsp; Neither of us get
        the $bounty credit bounty." :
      "I was unable to complete your favor on time.&nbsp; You receive the full
        $bounty credit bounty.";

    $sql = 'insert into challenge_messages
      (fkey_users_from_id, fkey_users_to_id, message)
      values (%d, %d, "%s");';
    $result = db_query($sql, $item->fkey_users_to_id, $item->fkey_users_from_id,
      $message);

// delete favor
    $sql = 'delete from favor_requests
      where id = %d;';
    $result = db_query($sql, $item->id);

// increment user stats
    $sql = 'update users
      set favors_asked_noncompleted = favors_asked_noncompleted + 1,
      money = money + %d
      where id = %d;';
    $result = db_query($sql, ($item->success_expected == 'n') ? $bounty : 0,
      $item->fkey_users_from_id);

    $sql = 'update users
      set favors_noncompleted = favors_noncompleted + 1
      where id = %d;';
    $result = db_query($sql, $item->fkey_users_to_id);

  } // each overdue favor


// update maps

  $map_large =
    imagecreatefrompng('sites/default/files/images/stlouis_map_large.png');
  $map_large_overlay = imagecreatefrompng(
    'sites/default/files/images/stlouis_map_large_overlay.png'
  );

  $sql = 'select id from neighborhoods
    where is_habitable = 1;';
  $result = db_query($sql);
  while ($item = db_fetch_object($result)) $hoods[] = $item;
// firep($hoods, 'hoods');

  $sql = 'SELECT party_icon, xcoor, ycoor, users.id
    FROM `users`

    LEFT JOIN `values` ON users.fkey_values_id = `values`.id

    LEFT OUTER JOIN elected_officials
    ON elected_officials.fkey_users_id = users.id

    LEFT OUTER JOIN elected_positions
    ON elected_positions.id = elected_officials.fkey_elected_positions_id

    LEFT OUTER JOIN neighborhoods
    ON users.fkey_neighborhoods_id = neighborhoods.id
    WHERE users.fkey_neighborhoods_id = %d

    ORDER by elected_positions.id DESC, users.experience DESC
    LIMIT 1;';

// check each hood -- wish i could figure out w/o a loop
  $data = array();
  foreach ($hoods as $hood) {
    $result = db_query($sql, $hood->id);
    $data[] = db_fetch_object($result);
  }

  foreach ($data as $item) {

// Fill w/ icon
    $icon = imagecreatefrompng('sites/default/files/images/stlouis_clan_' .
      $item->party_icon . '.png');
    imagecopy($map_large, $icon, $item->xcoor - 18, $item->ycoor - 18, 0, 0,
      imagesx($icon), imagesy($icon));
    imagedestroy($icon);
//

// old method -- fill w/o color
//     imagefill($map_large, $item->xcoor, $item->ycoor,
//       imagecolorallocate($map_large,
//       hexdec(substr($item->color, 0, 2)),
//       hexdec(substr($item->color, 2, 2)),
//       hexdec(substr($item->color, 4, 2))));

// st patrick's day
//     imagefill($map_large, $item->xcoor, $item->ycoor,
//       imagecolorallocate($map_large, 32, 224, 32));


  }

  imagecopy($map_large, $map_large_overlay, 0, 0, 0, 0,
    imagesx($map_large_overlay), imagesy($map_large_overlay));

  $map_mid = imagecreatetruecolor(690, 720);
  $map_top = imagecreatetruecolor(690, 720);
  $map_bottom = imagecreatetruecolor(690, 720);
  $map_large_mid = imagecreatetruecolor(imagesx($map_large),
    imagesy($map_large) - 600);
  $map_large_bottom = imagecreatetruecolor(imagesx($map_large), 600);

  imagecopy($map_mid, $map_large, 0, 0, 54, 488, 690, 720);
  imagecopy($map_top, $map_large, 0, 0, 100, 0, 690, 720);
  imagecopy($map_bottom, $map_large, 0, 0, 0, 900, 690, 720);

// slice map_large
  imagecopy($map_large_mid, $map_large, 0, 0, 0, 0, imagesx($map_large),
    imagesy($map_large) - 600);
  imagecopy($map_large_bottom, $map_large, 0, 0, 0, imagesy($map_large) - 600,
    imagesx($map_large), 600);

  imagejpeg($map_large_mid,
    "sites/default/files/images/stlouis_map_large_colored.jpg");
  imagejpeg($map_large_bottom,
    "sites/default/files/images/stlouis_map_large_bottom_colored.jpg");
  imagejpeg($map_mid,
    "sites/default/files/images/stlouis_map_mid.jpg", 85);
  imagejpeg($map_top,
    "sites/default/files/images/stlouis_map_top.jpg", 85);
  imagejpeg($map_bottom,
    "sites/default/files/images/stlouis_map_bottom.jpg", 85);

  imagedestroy($map_large);
  imagedestroy($map_large_overlay);
  imagedestroy($map_mid);
  imagedestroy($map_top);
  imagedestroy($map_bottom);

// flag day -- give luck to those with flags
//   unset($data);
//   $sql = 'select * from equipment_ownership where fkey_equipment_id = 23;';
//   $result = db_query($sql);
//   while ($item = db_fetch_object($result)) $data[] = $item;
//
//   foreach ($data as $item) {
//
//     $sql = 'update users set luck = luck + 1 where id = %d;';
//     $result = db_query($sql, $item->fkey_users_id);
//
//     $sql = 'insert into user_messages set fkey_users_from_id = 177,
//       fkey_users_to_id = %d, message = "Old Glory gives you 1 Luck!";';
//     $result = db_query($sql, $item->fkey_users_id);
//
//   }


// prune old log files
  $sql = 'delete from challenge_messages where timestamp < "%s"
    limit 10000;';
  $result = db_query($sql, date('Y-m-d H:i:s', time() - 400000));
// a little over a month

  db_set_active('default');

}
*/

function atl_init() {

  global $conf;

  if (arg(0) == 'atl') {
    $conf['cache'] = FALSE; // don't cache anything
    atlGetGameSettings()->addJs();
  }

} // stlouis_init()

/**
 * Filter profanity.
 *
 * @todo: move to own file.
 */
function _atl_filter_profanity($message) {

  $profanity = array(
	'4r5e',
	'5h1t',
	'5hit',
	'a_s_s',
	'a55',
	'anal',
	'anus',
	'ar5e',
	'arrse',
	'arse',
	'a§§',
	'ass',
	'asses',
	'assfucker',
	'ass-fucker',
	'assfukka',
	'asshole',
	'assholes',
	'asskisser',
	'asswhole',
	'asswipe',
    'asz',
    'azz',
	'beotch',
	'b!tch',
	'b00bs',
	'b17ch',
	'b1tch',
	'ballbag',
	'ballsack',
	'bastard',
	'beastial',
	'beastiality',
	'beastility',
	'beaver',
	'bellend',
	'belly whacker',
	'bestial',
	'bestiality',
	'beotch',
	'bytch',
	'bi+ch',
	'biatch',
	'bitch',
	'bitcher',
	'bitchers',
	'bitches',
	'bitchin',
	'bitching',
	'bloody',
	'blow job',
	'blowjob',
	'blowjobs',
	'boiolas',
	'bollock',
	'bollok',
	'bonehead',
	'boner',
	'boob',
	'boobs',
	'booobs',
	'boooobs',
	'booooobs',
	'booooooobs',
	'browntown',
	'btch',
	'buceta',
	'bucket cunt',
//	'bugger',
	'bullshit',
	'bung hole',
	'butch',
	'butt breath',
	'butt hair',
	'buttface',
	'buttfuck',
	'buttfucker',
	'butthead',
	'butthole',
	'buttmuch',
	'buttpicker',
	'buttplug',
	'c0ck',
	'c0cksucker',
	'carpet muncher',
	'cawk',
	'chink',
	'cipa',
	'circle jerk',
	'cl1t',
	'clam',
	'clit',
	'clitoris',
	'clits',
	'cnut',
	'cobia',
	'cock',
	'cockface',
	'cockhead',
	'cockmunch',
	'cockmuncher',
	'cocks',
	'cocksuck',
	'cocksucked',
	'cocksucker',
	'cock-sucker',
	'cocksucking',
	'cocksucks',
	'cocksuka',
	'cok',
	'cokmuncher',
	'coksucka',
	'coon',
	'cooter',
	'cox',
	'crap',
	'cum',
	'cummer',
	'cumming',
	'cums',
	'cumshot',
	'cunilingus',
	'cunillingus',
	'cunnilingus',
	'cunnilingus',
	'cunt',
	'cuntlick',
	'cuntlicker',
	'cuntlicking',
	'cunts',
	'cyalis',
	'cyberfuc',
	'cyberfuck',
	'cyberfucked',
	'cyberfucker',
	'cyberfuckers',
	'cyberfucking',
	'dammit',
	'd1ck',
	'damn',
	'damn',
	'dick',
	'dickhead',
	'dickk',
	'dike',
	'dildo',
	'dildos',
	'dink',
	'dinks',
	'dipshit',
	'dirsa',
	'dlck',
	'dog-fucker',
	'doggin',
	'dogging',
	'dong',
	'donkeyribber',
	'doosh',
	'douche bag',
	'duche',
	'dumbass',
	'dumbfuck',
	'dyke',
	'dyke',
	'ejaculate',
	'ejaculated',
	'ejaculates',
	'ejaculating',
	'ejaculatings',
	'ejaculation',
	'ejakulate',
	'fuc k',
	'fu c k',
	'fukin',
	'fck',
	'fvk',
	'f u c k',
	'f u c k e r',
	'f_u_c_k',
	'f4nny',
	'fag',
	'fagget',
	'fagging',
	'faggit',
	'faggitt',
	'faggot',
	'faggs',
	'fagot',
	'fagot',
	'fagots',
	'fags',
	'fanny',
	'fannyflaps',
	'fannyfucker',
	'fanyy',
	'fart',
	'farted',
	'farting',
	'fartings',
	'farts',
	'farty',
	'fatass',
	'fatso',
	'fcuk',
	'fcuker',
	'fcuking',
	'feck',
	'fecker',
	'felatio',
	'felching',
	'fellate',
	'fellatio',
	'fellatio',
	'fingerfuck',
	'fingerfucked',
	'fingerfucker',
	'fingerfuckers',
	'fingerfucking',
	'fingerfucks',
	'fistfuck',
	'fistfucked',
	'fistfucker',
	'fistfuckers',
	'fistfucking',
	'fistfuckings',
	'fistfucks',
	'flange',
	'fook',
	'fooker',
	'fuck',
	'fucka',
	'fucked',
	'fucker',
	'fuckers',
	'fuckers',
	'fuckhead',
	'fuckheads',
	'fuckin',
	'fucking',
	'fuckings',
	'fuckingshitmotherfucker',
	'fuckme',
	'fuckr',
	'fucks',
	'fuckwhit',
	'fuckwit',
	'fudge packer',
	'fudgepacker',
	'fuggin',
	'fuk',
	'fuker',
	'fukker',
	'fukkin',
	'fuks',
	'fukwhit',
	'fukwit',
	'furburger',
	'fux',
	'fux0r',
	'fvck',
	'gangbang',
	'gangbanged',
	'gangbangs',
	'gaylord',
	'gaysex',
	'gaysex',
	'gazongers',
	'goatse',
	'god-dam',
	'g--dam',
	'goddamn',
	'goddamn',
	'goddamned',
	'god-damned',
	'gonads',
	'gook',
	'guinne',
	'hard on',
	'hardcoresex',
	'hell',
	'heshe',
	'hoar',
	'hoare',
	'hoer',
	'homo',
	'hooker',
	'hore',
	'horniest',
	'horny',
	'hotsex',
	'hussy',
	'lmao',
	'lmfao',
	'jack off',
	'jackass',
	'jacking off',
	'jackoff',
	'jack-off',
	'jerk-off',
	'jism',
	'jiz',
	'jiz',
	'jizm',
	'jizz',
	'kawk',
	'kike',
	'knobead',
	'knobed',
	'knobend',
	'knobhead',
	'knobjocky',
	'knobjokey',
	'kock',
	'kondum',
	'kondums',
	'kum',
	'kummer',
	'kumming',
	'kums',
	'kunilingus',
	'kunilingus',
	'l3i+ch',
	'l3itch',
	'labia',
	'lesbian',
	'lesbo',
	'm0f0',
	'm0fo',
	'm45terbate',
	'ma5terb8',
	'ma5terbate',
	'masterb8',
	'masterbat*',
	'masterbat3',
	'masterbate',
	'master-bate',
	'masterbation',
	'masterbations',
	'masturbate',
	'mof0',
	'mofo',
	'mo-fo',
	'mothafuck',
	'mothafucka',
	'mothafuckas',
	'mothafuckaz',
	'mothafucked',
	'mothafucker',
	'mothafuckers',
	'mothafuckin',
	'mothafucking',
	'mothafuckings',
	'mothafucks',
	'mother fucker',
	'motherfuck',
	'motherfuck',
	'motherfucked',
	'motherfucker',
	'motherfuckers',
	'motherfuckin',
	'motherfuckin',
	'motherfucking',
	'motherfuckings',
	'motherfuckka',
	'motherfucks',
	'muff',
	'mutha',
	'muthafecker',
	'muthafuckker',
	'muther',
	'mutherfucker',
	'n1gga',
	'n1gger',
	'nazi',
	'nigg3r',
	'nigg4h',
	'nigga',
	'niggah',
	'niggas',
	'niggaz',
	'nigger',
	'niggers',
	'nobhead',
	'nobjocky',
	'nobjokey',
	'numbnuts',
	'nutsack',
	'orgasim',
	'orgasims',
	'orgasm',
	'orgasms',
	'p0rn',
	'pawn',
	'pecker',
	'penis',
	'penisfucker',
	'phonesex',
	'phuck',
	'phuk',
	'phuked',
	'phuking',
	'phuking',
	'phukked',
	'phukking',
	'phuks',
	'phuks',
	'phuq',
	'phuq',
	'pigfucker',
	'pimp',
	'pimpis',
	'piss',
	'pissed',
	'pisser',
	'pissers',
	'pisses',
	'pissflaps',
	'pissin',
	'pissing',
	'pissoff',
	'pissrr',
	'poop',
	'porn',
	'porno',
	'pornography',
	'pornos',
	'pron',
	'pube',
	'pusse',
	'pussi',
	'pussies',
	'pussies',
	'pussy',
	'pussys',
	'queer',
	'rectum',
	'retard',
	'rimjaw',
	'rimming',
	'rape',
	'shlt',
	'sh!t',
	'sh!ts',
	'slut',
	's hit',
	's.o.b.',
	's_h_i_t',
	'sadist',
	'schlong',
	'screw',
	'screwing',
	'scroat',
	'scrote',
	'scrotum',
	'semen',
	'sex',
	'sh!+',
	'sh!t',
	'sh1t',
	'shag',
	'shagger',
	'shaggin',
	'shagging',
	'sheister',
	'shemale',
	'shi+',
	'shit',
	'sh!t',
	'shitdick',
	'shite',
	'shited',
	'shited',
	'shitey',
	'shitfuck',
	'shitfull',
	'shitfull',
	'shithead',
	'shiting',
	'shitings',
	'shits',
	'shits',
	'shitted',
	'shitter',
	'shitters',
	'shitting',
	'shittings',
	'shitty',
	'shitty',
	'shiz',
	'sht',
	'shttim',
	'skank',
	'slag',
	'sleaze',
	'slut',
	'slut',
	'sluts',
	'smartass',
	'smegma',
	'smut',
	'snatch',
	'son-of-a-bitch',
	'spac',
	'spunk',
	'stupidass',
	't1tt1e5',
	't1tties',
	'teets',
	'teez',
	'testical',
	'testicle',
	'tit',
	'titfuck',
	'tits',
	'titt',
	'tittie5',
	'tittiefucker',
	'titties',
	'tittyfuck',
	'tittywank',
	'titwank',
	'tosser',
	'turd',
	'tw4t',
	'twat',
	'twathead',
	'twatty',
	'twunt',
	'twunter',
	'tampon',
	'v14gra',
	'v1gra',
	'vagina',
	'viagra',
	'vulva',
	'w00se',
	'wang',
	'wank',
	'wanker',
	'wanky',
	'wetback',
	'whoar',
	'whore',
	);

  $msg = str_replace(
    array('@', '$', "'", '.', '&#039;', '&quot;'),
    array('a', 's', ' ', ' ', ' ', ' '),
    $message);

  setlocale(LC_ALL, 'en_US');
  $msg = preg_replace('/[^A-Za-z0-9 ]/', '',
    iconv('utf-8', 'ascii//TRANSLIT', $msg));

  foreach ($profanity as $word) {
    $pattern = "/\b$word\b/i"; // Check word boundaries, ignoring case

    if (preg_match($pattern, $msg) == 1) return "XXX: found $word XXX";

  }

  return $message;

}

function _atl_format_date($epoch) {

  $time_diff = time() - $epoch;
// firep("time difference: $time_diff");

  if ($time_diff < 0) { // in the future?

    if ($time_diff > -10) {
      return t('A few seconds from now');
    } else if ($time_diff > -60) {
      return t('@time seconds', array('@time' => abs($time_diff)));
    } else if ($time_diff > -120) {
      return t('1 minute from now');
    } else if ($time_diff > -3600) {
      return t('@time minutes from now',
        array('@time' => abs(floor($time_diff / 60))));
    } else if ($time_diff > -7200) {
      return t('1 hour from now');
    } else if ($time_diff > -86400) {
      return t('@time hours from now',
        array('@time' => abs(floor($time_diff / 3600))));
    } else if ($time_diff > -172800) {
      return t('A day from now');
    } else if ($time_diff > -1728000) {
      return t('@time days from now',
        array('@time' => abs(floor($time_diff / 86400))));
    } else {
      return date('d M Y', $epoch);
    }

  } // in the future

  if ($time_diff == 0) {
    return t('Now!');
  } else if ($time_diff < 10) {
    return t('A few seconds ago');
  } else if ($time_diff < 60) {
    return t('@time seconds ago', array('@time' => $time_diff));
  } else if ($time_diff < 120) {
    return t('1 minute ago');
  } else if ($time_diff < 3600) {
    return t('@time minutes ago', array('@time' => floor($time_diff / 60)));
  } else if ($time_diff < 7200) {
    return t('1 hour ago');
  } else if ($time_diff < 86400) {
    return t('@time hours ago', array('@time' => floor($time_diff / 3600)));
  } else if ($time_diff < 172800) {
    return t('A day ago');
  } else if ($time_diff < 1728000) {
    return t('@time days ago', array('@time' => floor($time_diff / 86400)));
  } else {
    return date('d M Y', $epoch);
  }

}

function _atl_ordinal($number) {
// lifted from http://php.net/manual/en/function.number-format.php

  if ( ($num / 10) % 10 != 1 ) { // Special case "teenth"

    switch( $num % 10 ) { // Handle 1st, 2nd, 3rd

      case 1: return $num . 'st';
      case 2: return $num . 'nd';
      case 3: return $num . 'rd';

    }

  }

// Everything else is "nth"
  return $num . 'th';

}

/**
 * Save user agent.
 */
function _atl_save_user_agent($game_user) {

  global $purchasing_luck, $user;

  // Loading luck doesn't count.
  if ($purchasing_luck) {
    return;
  }

//  if ($user->roles[4] == 'web game access') return; // admin access

  $user_agent = $_SERVER['HTTP_USER_AGENT'];
  $last_agent = _atl_get_value($game_user->id, 'user_agent');

  // Same user agent?  That's fine.
  if ($last_agent == $user_agent) {
    return;
  }

  // New user agent?  Save it and return.
  if (empty($last_agent)) { // no entry?  create one!
    _atl_set_value($game_user->id, 'user_agent', $user_agent);
    return;
  }

  // Different user agent but user has no password?  Save user agent and return.
  if (empty($game_user->password)) {
    _atl_set_value($game_user->id, 'user_agent', $user_agent);
    return;
  }

  // Different user agent and user has a password -- gotta authenticate!
  $game = check_plain(arg(0));
  $arg2 = check_plain(arg(2));
  db_set_active('default');
  drupal_goto($game . '/authenticate/' . $arg2);

}

/**
 * Save IP address.
 */
function _atl_save_user_IP($game_user) {

  global $purchasing_luck, $user;

  // Loading luck doesn't count.
  if ($purchasing_luck) {
    return;
  }

//  if ($user->roles[4] == 'web game access') return; // admin access

  $ip_addr = ip_address();
  $last_ip = _atl_get_value($game_user->id, 'ip_address');

  // Same IP address?  That's fine.
  if ($last_ip == $ip_addr) {
    return;
  }

  // New IP address?  Save it and return.
  if (empty($last_ip)) { // no entry?  create one!
    _atl_set_value($game_user->id, 'ip_address', $ip_addr);
    return;
  }

  // Different IP address but user has no password?  Save IP address and return.
  if (empty($game_user->password)) {
    _atl_set_value($game_user->id, 'ip_address', $ip_addr);
    return;
  }

  // Different IP address and user has a password -- gotta authenticate!
  $game = check_plain(arg(0));
  $arg2 = check_plain(arg(2));
  db_set_active('default');
  drupal_goto($game . '/authenticate/' . $arg2);

}

/**
 * Get the user's authkey from their user agent.
 *
 * @return string
 *   The authkey
 */
function _atl_get_authKey() {

  $authKey = '';

  if (substr(arg(2), 0, 3) == 'ms=') {
    $authKey = substr(arg(2), 21);
  } else { // authkey in user agent

    $agentBits = explode(' ', $_SERVER['HTTP_USER_AGENT']);

    foreach ($agentBits as $agentBit) {
      if (substr($agentBit, 0, 8) == 'authKey=') {
        $authKey = substr($agentBit, 8, strlen($agentBit) - 9);
      }
    }

  }

  return $authKey;
}

/**
 * Save the user's authkey in the database.
 *
 * @param StdClass $game_user
*    Game User object.

 * @param string $authKey
 *   The authkey.
 */
function _atl_set_authKey(StdClass &$game_user, $authKey) {

  $game_user->authKey = $authKey;
  $sql = 'UPDATE users set authKey = "%s"
    WHERE id = %d;';
  $result = db_query($sql, $authKey, $game_user->id);

}

/**
 * Check the user's authKey.
 */
function _atl_check_authKey($game_user) {

  global $purchasing_luck, $user;

  // Loading luck doesn't count.
  if ($purchasing_luck) {
    return;
  }

  // Allow bad authkeys on the authentication page.
  if (arg(1) == 'authenticate') {
    return;
  }

  // Web game access doesn't count.
  if (user_access('atl web access')) {
    return;
  }

  // Other conditions for which we don't care about authKeys:
  if ((substr(arg(2), 0, 3) == 'ai-') // NPC
  || (arg(2) == 'facebook') // from FB
  || (_atl_get_value($game_user->id, 'allow_null_authkey'))) { // per-user override
    return;
  }

  $key = _atl_get_authKey();

  // No authKey and not in our exception list?  Hacking!!!
  if (empty($key)) {
    $game = check_plain(arg(0));
    $arg2 = check_plain(arg(2));
    db_set_active('default');
    drupal_goto($game . '/error/' . $arg2 . '/E-0922'); // no authKey -- hacking
  }

  // Same authKey?  That's fine.
  if ($key == $game_user->authKey) {
    return;
  }

  // New authKey?  Save it and return.
  if (empty($game_user->authKey)) {
    _atl_set_authKey($game_user, $authKey);
    return;
  }

  // Different authKey but user has no password?  Needs admin reset.
  if (empty($game_user->password)) {
    $game = check_plain(arg(0));
    $arg2 = check_plain(arg(2));
    db_set_active('default');
    drupal_goto($game . '/error/' . $arg2 . '/E-1017'); // different authKey -- needs admin reset
  }

  // Different authKey and user has a password -- gotta authenticate!
  $game = check_plain(arg(0));
  $arg2 = check_plain(arg(2));
  db_set_active('default');
  drupal_goto($game . '/authenticate/' . $arg2);

}

/**
 * Remove a value in the db.
 */
function _atl_remove_value($fkey_users_id, $key) {

  $sql = 'delete from {user_attributes}
    where `fkey_users_id` = %d and `key` = "%s";';

  $result = db_query($sql, $fkey_users_id, $key);
}

/**
 * Get a user's phone ID.  The phone ID is the user's ID.  Doesn't actually
 * ask for credentials or check that the phone ID belongs to the user in
 * question.
 */
function _atl_get_phoneid() {

  if ((substr(arg(2), 0, 3) == 'fb=') || arg(2) == '') {
    slack_send_message('fix ' . request_uri() . "\n"
    . 'Referrer is ' . $_SERVER['HTTP_REFERER'], 'atl-errors');
    echo 'Uhoh! Bad URL ' . request_uri()
    . ' from <a href="' . $_SERVER['HTTP_REFERER'] . '">' .
      $_SERVER['HTTP_REFERER'] . '</a>';
    db_set_active('default');
    drupal_exit();
  }

  if (arg(2) == 'facebook') {
    return _stlouis_get_fbid();
  }

  if (arg(2) === 'null') {
    db_set_active('default');
    drupal_goto('atl/playbook_null');
  }

  if (substr(arg(2), 0, 3) === 'ms=') {
    return _stlouis_get_msid();
  }

  return check_plain(arg(2));
}

function _atl_get_msid() {
//   drupal_add_css(drupal_get_path('theme', 'cdc_games') . '/msie.css');
  return substr(arg(2), 3, 17);
}

function _atl_get_fbid() {
  require_once ('fb/facebook.php');

  // Facebook configuration
  if (arg(0) == 'atl') { // @FIXME get app_id and secret for USL2

    $app_id = '234564386596716';
    $secret = '0b631d36aaba590fe31b2f1b9392aad7';
    $canvas_page = 'https://apps.facebook.com/uprisingstlouis/';

  }

  // first, try normal facebook getUser().  If that works, awesome.
  $facebook = new Facebook(array(
    'appId'  => $app_id,
    'secret' => $secret,
    'cookie' => TRUE,
  ));

//  echo '<pre>'; print_r($_SERVER); echo '</pre>';
  $signed_request = $_REQUEST['signed_request'];
//  echo '<pre>'; print_r($signed_request); echo '</pre>';

  // Get User ID
  $user = $facebook->getUser();
  if ($user != '0') {
    return 'fb=' . $user;
  }

// getUser() didn't work.  Try oAuth.  Maybe user needs to log in or
// authorize the game?

  $auth_url = 'http://www.facebook.com/dialog/oauth?client_id='
  . $app_id . '&redirect_uri=' . urlencode($canvas_page);
  list($encoded_sig, $payload) = explode('.', $signed_request, 2);
  $data = json_decode(base64_decode(strtr($payload, '-_', '+/')), true);

  if (empty($data['user_id'])) {
    echo '<a target="_top" href="' . $auth_url . '">Login to Facebook</a>';
    db_set_active('default');
    drupal_exit();
//    echo("<script> top.location.href='" . $auth_url . "'</script>");
  }

//    echo ("Welcome User: " . $data["user_id"]);
  return 'fb=' . $data['user_id'];
}

function _atl_bump_event_tags_con($id) {

  // Add user entry, if it doesn't exist.
  $sql = 'select * from event_points where fkey_users_id = %d;';
  $result = db_query($sql, $id);
  $row = db_fetch_object($result);

  if (empty($row)) {
    $sql = 'insert into event_points set fkey_users_id = %d;';
    $result = db_query($sql, $id);
    $row->points = $row->tags_con = 0;
  }

  // Update points.
  $row->tags_con++;
  $row->points += min($row->tags_con, 20);

  $sql = 'update event_points set tags_con = %d, points = %d
    where fkey_users_id = %d;';
  $result = db_query($sql, $row->tags_con, $row->points, $id);

  return $row;
}

function _atl_reset_event_tags_con($id) {

  // Add user entry, if it doesn't exist.
  $sql = 'select * from event_points where fkey_users_id = %d;';
  $result = db_query($sql, $id);
  $row = db_fetch_object($result);

  if (empty($row)) {
    $sql = 'insert into event_points set fkey_users_id = %d;';
    $result = db_query($sql, $id);
    $row->points = $row->tags_con = 0;
  }

  // Update points.
  $row->tags_con = 0;

  $sql = 'update event_points set tags_con = %d
    where fkey_users_id = %d;';
  $result = db_query($sql, $row->tags_con, $id);

  return $row;
}

function REMOVED_atl_fetch_user() {

  global $game, $phone_id, $extra_messages, $cur_level, $next_level, $user;

  $changes_made = FALSE;

  $game = check_plain(arg(0));
  $phone_id = _atl_get_phoneid();
// if (arg(2) == 'facebook') echo '$phone_id returned is ' . $phone_id . '<br/>';
  $arg2 = check_plain(arg(2));
  db_set_active('game_' . $game);

  include (drupal_get_path('module', $game) . '/game_defs.inc');

// check for banned users -- phone_id

  $sql = 'select * from user_blocks where phone_id = "%s";';
  $result = db_query($sql, $phone_id);
  $blocked_user = db_fetch_object($result);

  if (!empty($blocked_user) &&
    $blocked_user->phone_id == $phone_id) { // user is banned!
    drupal_goto(check_plain(arg(0)) . '/error/'
      . check_plain(arg(2)) . '/E-0467'); // banned by phone ID
  }

// check for banned users -- ip address

  $sql = 'select * from user_blocks where ip_address = "%s"
    or ip_address = "%s";';
  $result = db_query($sql, $_SERVER['REMOTE_ADDR'], ip_address());
  $blocked_ip = db_fetch_object($result);

  if (!empty($blocked_ip)) { // user is banned!
    drupal_goto(check_plain(arg(0)) . '/error/'
      . check_plain(arg(2)) . '/E-0468'); // banned by IP
  }

// get uid

  $sql = 'select id from users
    where phone_id = "%s";';
  $result = db_query($sql, $phone_id);
  $game_user = db_fetch_object($result);

// update expenses

  $sql = 'update users set expenses =

    (SELECT sum(equipment.upkeep * equipment_ownership.quantity)
    as expenses from equipment
    left join equipment_ownership
    on equipment_ownership.fkey_equipment_id = equipment.id and
    equipment_ownership.fkey_users_id = %d)

    where id = %d;';
  $result = db_query($sql, $game_user->id, $game_user->id);

  // Get full user object.
  $game_user = fetch_user_by_id($phone_id);

// start welcome wizard if user not in db
  if (empty($game_user->id)) {
/*
    if ($arg2 == 'facebook') {
      echo 'would redirect to welcome ' . $phone_id ;
      echo '<a href="/' . $game . '/welcome/' . $arg2 . '">do it manually</a>';
      echo '<a href="/' . $game . '/quests/' . $arg2 . '">go straight to quests</a>';
      exit;
    }
*/
    drupal_goto($game . '/welcome/' . $arg2);
  }

// save the IP address, user agent of user
  _atl_save_user_agent($game_user);
  _atl_save_user_IP($game_user);
  _atl_check_authKey($game_user);

  if (strpos($_SERVER['HTTP_USER_AGENT'], 'BlueStacks') !== FALSE) {
    if ($game_user->level <= 50) {
      _atl_set_value($game_user->id, 'sdk', 1);
    }
  }

  // Level up
  // moved to game_fetch_user_by_id()

// calculate energy
// moved to game_fetch_user_by_id()

  // calculate income

  $income_next_gain = strtotime($game_user->income_next_gain);
  $secs_until = $income_next_gain - time();
  $max_income_gain = 72;

  while ($secs_until <= 0) { // do we get money?

    $changes_made = TRUE;
    if ($max_income_gain > 0) // add money
      $game_user->money += $game_user->income - $game_user->expenses;
    $income_next_gain += 3600; // next add in 60 mins
    $secs_until += 3600; // ditto
    $max_income_gain--;

  }

  $actions_next_gain = strtotime($game_user->actions_next_gain);
  $secs_until = $actions_next_gain - time();

  // calculate actions

  while (($game_user->actions < $game_user->actions_max) &&
  ($secs_until <= 0)) { // do we need actions?

    $changes_made = TRUE;
    $game_user->actions++; // add 1 action
    $actions_next_gain += 180; // next add in 3 mins
    $secs_until += 180; // ditto

  }

  while (($game_user->actions > $game_user->actions_max) &&
    ($secs_until <= 0)) { // do we need actions?

    $changes_made = TRUE;
    $game_user->actions--; // delete 1 action
    $actions_next_gain += 180; // next add in 3 mins
    $secs_until += 180; // ditto

  }

// frozen

  if ($game_user->meta == 'frozen')
    $extra_messages = '<div class="title">- = * F R O Z E N * = -</div>';

  // moved to game_fetch_user_by_id()
//  if ($changes_made) {} // save changes, if needed

  if ($leveled_up && ($game_user->level == 6) &&
    (substr($game_user->meta, 0, 3) !== 'ai_')) {

//    if (($game == 'stlouis') || ($game == 'robber_barons'))
      drupal_goto($game . '/choose_clan/' . $arg2 . '/0');

//    if ($game == 'celestial_glory')
//      drupal_goto($game . '/debates/' . $arg2);

  }

  return $game_user;

}

/**
 * Load an instance of GameSettings.
 *
 * @return \Drupal\atl\Settings\GameSettings
 */
function atlGetGameSettings() {
  static $GameSettings;
  if (!isset($GameSettings)) {
    $GameSettings = new Drupal\atl\Settings\GameSettings();
  }
  return $GameSettings;
}
